// Script.js for Music Game Application

const backendUrl = BACKEND_URL; // Dynamically set using ConfigMap
const songs = ['song1', 'song2', 'song3', 'song4', 'song5']; // Example list of song files
const songBackgrounds = {
    song1: 'images/song1-background.jpg',
    song2: 'images/song2-background.jpg',
    song3: 'images/song3-background.jpg',
    song4: 'images/song4-background.jpg',
    song5: 'images/song5-background.jpg',
    song6: 'images/song6-background.jpg',
    song7: 'images/song7-background.jpg',
    song8: 'images/song8-background.jpg',
    song9: 'images/song9-background.jpg',
    song10: 'images/song10-background.jpg'
};

let currentSongIndex = 0;
let guesses = [];
let playerName = ''; // Captured at the start of the game

const audioElement = document.getElementById('audio');
const resultElement = document.getElementById('result');
const playSongBtn = document.getElementById('playSongBtn');
const submitGuessBtn = document.getElementById('submitGuessBtn');
const submitAllGuessesBtn = document.getElementById('submitAllGuessesBtn');

function updateBackgroundImage(song) {
    const background = songBackgrounds[song] || 'images/default-background.jpg';
    document.body.style.backgroundImage = `url(${background})`;
}

function playNextSong() {
    if (currentSongIndex < songs.length) {
        const currentSong = songs[currentSongIndex];
        audioElement.src = `/audio/${currentSong}.mp3`;
        audioElement.play();
        updateBackgroundImage(currentSong);

        resultElement.innerText = `Playing: ${currentSong}`;
        currentSongIndex++;
        playSongBtn.disabled = true;
        submitGuessBtn.disabled = false;
    } else {
        resultElement.innerText = 'All songs have been played. Submit your guesses for the final results.';
        playSongBtn.disabled = true;
        submitAllGuessesBtn.disabled = false;
    }
}

function submitGuess() {
    const songGuessInput = document.getElementById('songGuessInput');
    const artistGuessInput = document.getElementById('artistGuessInput');

    if (songGuessInput.value.trim() && artistGuessInput.value.trim()) {
        guesses.push({
            songFile: songs[currentSongIndex - 1],
            songGuess: songGuessInput.value.trim(),
            artistGuess: artistGuessInput.value.trim()
        });

        songGuessInput.value = '';
        artistGuessInput.value = '';
        resultElement.innerText = 'Guess submitted! Get ready for the next song.';

        submitGuessBtn.disabled = true;
        setTimeout(playNextSong, 2000); // Delay before playing the next song
    } else {
        resultElement.innerText = 'Please enter both a song and an artist guess.';
    }
}

async function submitAllGuesses() {
    submitAllGuessesBtn.disabled = true;
    submitAllGuessesBtn.innerText = 'Submitting...';

    try {
        const response = await fetch(`${backendUrl}/submit-guesses`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ playerName, guesses })
        });

        if (!response.ok) {
            throw new Error('Failed to submit guesses');
        }

        const result = await response.json();

        const totalCorrectSongGuesses = result.correctSongGuesses || 0;
        const totalCorrectArtistGuesses = result.correctArtistGuesses || 0;
        const correctAnswers = result.correctAnswers || [];

        resultElement.innerText = `
            Game Over! You got ${totalCorrectSongGuesses} song(s) and ${totalCorrectArtistGuesses} artist(s) correct.
            Correct Answers: ${correctAnswers.join(', ')}
        `;

        submitAllGuessesBtn.innerText = 'Submit All Guesses';
    } catch (error) {
        console.error('Error submitting guesses:', error);
        resultElement.innerText = 'Error: Could not submit your guesses. Please try again.';
        submitAllGuessesBtn.disabled = false;
        submitAllGuessesBtn.innerText = 'Submit All Guesses';
    }
}

audioElement.onended = () => {
    submitGuessBtn.disabled = false;
};

playSongBtn.addEventListener('click', playNextSong);
submitGuessBtn.addEventListener('click', submitGuess);
submitAllGuessesBtn.addEventListener('click', submitAllGuesses);

// Initialize the game
function initializeGame() {
    playerName = prompt('Enter your name to start the game:');
    if (!playerName) {
        resultElement.innerText = 'Please enter a valid name to start.';
        return;
    }

    resultElement.innerText = `Welcome, ${playerName}! Click "Play Song" to start.`;
    playSongBtn.disabled = false;
    submitGuessBtn.disabled = true;
    submitAllGuessesBtn.disabled = true;
}

initializeGame();
