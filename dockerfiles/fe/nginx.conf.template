worker_processes auto;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    server {
        listen 8080;
        server_name localhost;

        # Serve static files from /usr/share/nginx/html
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ =404; # Return a 404 if file not found
        }

        # Proxy requests to the backend Node.js service for /submit-guesses
        location /submit-guesses {
            proxy_pass http://$BACKEND_URL; # Using the BACKEND_URL variable
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # CORS headers if needed
            # add_header 'Access-Control-Allow-Origin' '*';
            # add_header 'Access-Control-Allow-Methods' 'GET, POST';
            # add_header 'Access-Control-Allow-Headers' 'Content-Type';
        }

        # Proxy requests for other API calls
        location /api/ {
            proxy_pass http://$BACKEND_URL; # Using the BACKEND_URL variable for other API calls
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # CORS headers if needed
            # add_header 'Access-Control-Allow-Origin' '*';
            # add_header 'Access-Control-Allow-Methods' 'GET, POST';
            # add_header 'Access-Control-Allow-Headers' 'Content-Type';
        }

        # Serve /config files from NGINX, as before
        location /config {
            root /usr/share/nginx/html;
            autoindex on;
        }

        # Error handling for Bad Gateway
        location = /custom_502.html {
            root /usr/share/nginx/html; # Provide a custom error page
            internal;
        }
    }
}
